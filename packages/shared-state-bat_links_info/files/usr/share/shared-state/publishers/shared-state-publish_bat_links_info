#!/usr/bin/lua

--! LibreMesh
--! Copyright (C) 2023  Javier Jorge <jjorge@inti.gob.ar>
--! Copyright (C) 2023  Asociaci√≥n Civil Altermundi <info@altermundi.net>
--!
--! SPDX-License-Identifier: AGPL-3.0-only

local JSON = require("luci.jsonc")
local utils = require('lime.utils')
local network = require ("lime.network")
local shared_state_links_info = require ("shared_state_links_info")

function get_bat_links_info()
	local bat_neighbors_obj={}
	local bat_originators_obj={}
	local bat_originators = utils.unsafe_shell("batctl oj")
	bat_originators_obj = JSON.parse(bat_originators)


	local bat_neighbors = utils.unsafe_shell("batctl nj")
	bat_neighbors = string.gsub(bat_neighbors,"neigh_address","dst_mac")
	bat_neighbors = string.gsub(bat_neighbors,"hard_ifname","iface")
	bat_neighbors_obj = JSON.parse(bat_neighbors)
	local kv_fromlinks = {}
	if bat_neighbors_obj then
		for key,neight_value in pairs (bat_neighbors_obj) do
			local macparts = network.get_mac(neight_value.iface)
			local src_macaddr = table.concat(macparts,":")
			neight_value.hard_ifindex=nil
			neight_value.src_mac=string.lower(src_macaddr)
			neight_value.dst_mac=string.lower(neight_value.dst_mac)
			for key,originator_value in pairs (bat_originators_obj) do
				if originator_value.hard_ifname == neight_value.iface and 
				originator_value.neigh_address== originator_value.orig_address and  
				originator_value.neigh_address== neight_value.dst_mac then
					--! Batman "transmit link quality" (tq) is a byte that describes 
					--! the probability of a successful transmission towards a
					--! neighbor node
					neight_value.tq = originator_value.tq
				end
			end
			local key_table = {(string.gsub(neight_value.src_mac,":","")),(string.gsub(neight_value.dst_mac,":",""))}
			table.sort(key_table)
			kv_fromlinks[table.concat(key_table)]=neight_value
		end
	end
	return kv_fromlinks
end

shared_state_links_info.insert_in_ss_with_location(get_bat_links_info(),"bat_links_info")
