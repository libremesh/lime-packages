#!/usr/bin/lua
--[[
    Copyright (C) 2019-2020 Santiago Piccinini <spiccinini@altermundi.net>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
]]--

local io = require "io"
local json = require "luci.jsonc"
local utils = require "lime.utils"

local su = {}

su.version = '1.0'
local firmware_size_bytes = 7936*1024
local fw1_addr = 0x9f050000
local fw2_addr = 0x9f050000 + firmware_size_bytes
su._supported_devices = {'librerouter-v1'}
su._mtd_partitions_desc = '/proc/mtd'

-- safe upgrade script, generated with bootscript.py, DO NOT edit here!
local bootcmd = 'run preboot; boot_part=${stable_part}; if test ${testing_part} -ne 0; then echo Testing part ${testing_part}; boot_part=${testing_part}; set testing_part 0; saveenv; fi; if test ${boot_part} -eq 2; then fw_addr=${fw2_addr}; run boot_2; else fw_addr=${fw1_addr}; run boot_1; fi; run boot_1; bootm ${fw1_addr};'

su.STABLE_PARTITION_NAME = 'stable_part'
su.TESTING_PARTITION_NAME = 'testing_part'

local safe_upgrade_auto_reboot_script = [[#!/bin/sh /etc/rc.common

REBOOT_FILE_CONFIG_TIMEOUT_S="/etc/safe_upgrade_auto_reboot_confirm_timeout_s"
MINIMUM_REBOOT_TIMEOUT_S=60
PIDFILE="/var/run/safe_upgrade_auto_reboot_script.pid"
CMD_FORCE_REBOOT="echo b > /proc/sysrq-trigger" # Immediately reboot the system without syncing or unmounting disks.

START=11

start() {
  if [ -s "$REBOOT_FILE_CONFIG_TIMEOUT_S" ]; then
      read reboot_at_uptime_s < "$REBOOT_FILE_CONFIG_TIMEOUT_S"
  else
      exit 0
  fi

  # check that the reboot time is above the minimum to prevent infinite reboots
  if [ "$reboot_at_uptime_s" -lt "$MINIMUM_REBOOT_TIMEOUT_S" ]; then
      echo "safe-upgrade reboot: Less than minimum timeout! aborting"
      exit 0
  fi

  (sleep "$reboot_at_uptime_s" && \
   if [ -s "$REBOOT_FILE_CONFIG_TIMEOUT_S" ]; then
       reboot ; sleep 10 ; eval "$CMD_FORCE_REBOOT"
   fi
   ) &

  echo $! > "$PIDFILE"
}

stop() {
  rm "$REBOOT_FILE_CONFIG_TIMEOUT_S"
  sync
  kill -9 `cat "$PIDFILE"`
}
]]

function su.get_uboot_env(key)
    local value = utils.unsafe_shell("fw_printenv -n " .. key .. " 2>&1")

    if value:find('## Error:') == nil then
        -- remove EOL
        local value = value:sub(1, -2)
        return value
    else
        return nil
    end
end

local function set_uboot_env(key, value)
    print("DEBUG: seting key:" .. key)
    print("DEBUG: value:" .. value)
    local value = utils.unsafe_shell("fw_setenv " .. key .. " '" .. value .. "'")
end

local function fw_env_configured()
    return utils.file_exists('/etc/fw_env.config')
end

local function assert_fw_env_configured()
    if not fw_env_configured() then
        print('/etc/fw_env.confg does not exist, aborting')
        os.exit(115)
    end
end

local function get_current_cmdline()
    return utils.read_file('/proc/cmdline')
end

function su.get_current_partition()
    local data = utils.read_file(su._mtd_partitions_desc)
    if data:find("fw2") == nil then
        return 2
    else
        return 1
    end
end

function su.get_partitions()
    local p = {}
    p.current = su.get_current_partition()
    if p.current == 1 then
        p.other = 2
    else
        p.other = 1
    end
    p.stable = tonumber(su.get_uboot_env(su.STABLE_PARTITION_NAME))
    p.testing = tonumber(su.get_uboot_env(su.TESTING_PARTITION_NAME))

    return p
end

local function get_su_version()
    return su.get_uboot_env('su_version')
end

local function is_su_installed()
    return get_su_version() ~= nil
end

local function fw_env_config()
    if not fw_env_configured() then
        print('fw_env.config not found, installing /etc/fw_env.config')
        fw_env_configure()
    end
end

local function set_testing_partition(partition)
    set_uboot_env(su.TESTING_PARTITION_NAME, tostring(partition))
end

local function set_stable_partition(partition)
    set_uboot_env(su.STABLE_PARTITION_NAME, tostring(partition))
end

local function assert_su_installed()
    if not is_su_installed() then
        print('safe-upgrade is not installed, aborting')
        os.exit(114)
    end
end

local function read_fw_metadata(path)
    local handle = io.popen("fwtool -i - " .. path)
    local metadata = json.parse(handle:read("*a"))
    handle:close()
    return metadata
end

function su.get_current_device()
    return utils.read_file("/tmp/sysinfo/board_name")
end

function su.get_supported_devices()
    return su._supported_devices
end

function su.is_current_board_supported()
    local current_device = su.get_current_device()
    for _, supported_device in pairs(su.get_supported_devices()) do
        if string.find(current_device, utils.literalize(supported_device)) then
            return true
        end
    end
    return false
end

function su.is_firmware_valid(metadata)
    local current_device = su.get_current_device()
    if metadata ~= nil then
        local fw_devices = metadata['supported_devices']
        if fw_devices ~= nil then
            for _, fw_device in pairs(fw_devices) do
                for _, supported_device in pairs(su.get_supported_devices()) do
                    --! Check that the firmware is supported by safe upgrade
                    --! and that the current board is among the firmware devices
                    if string.find(fw_device, utils.literalize(supported_device)) and
                       string.find(fw_device, utils.literalize(current_device)) then
                        return true
                    end
                end
            end
        end
    end
    return false
end

function su.preserve_files_to_new_partition(args)
    os.execute("rm -rf /tmp/_to_sysupgradetgz/")
    os.execute("mkdir -p /tmp/_to_sysupgradetgz/etc/init.d/")
    os.execute("mkdir -p /tmp/_to_sysupgradetgz/etc/rc.d/")
    local f = io.open("/tmp/_to_sysupgradetgz/etc/init.d/safe_upgrade_auto_reboot", "w")
    f:write(safe_upgrade_auto_reboot_script)
    f:close()

    os.execute("chmod +x /tmp/_to_sysupgradetgz/etc/init.d/safe_upgrade_auto_reboot")
    os.execute("ln -s ../init.d/safe_upgrade_auto_reboot /tmp/_to_sysupgradetgz/etc/rc.d/S11safe_upgrade_auto_reboot")

    if not args.disable_reboot_safety then
        local f = io.open("/tmp/_to_sysupgradetgz/etc/safe_upgrade_auto_reboot_confirm_timeout_s", "w")
        f:write(args.reboot_safety_timeout)
        f:close()
    end

    if args.do_not_preserve_config then
        utils.log('Not preserving config.')
    else
        utils.log('Preserving libremesh minimal config.')
        local files = ""
        for _, file_name in pairs(utils.keep_on_upgrade_files()) do
            if utils.file_exists(file_name) then
                files = files .. " " .. file_name
            end
        end
        if files ~= '' then
            --! using an intermediate tar file for simplicity
            os.execute("tar cf /tmp/_safe_upgrade_intermadiate.tar " .. files .. " 2> /dev/null")
            os.execute("tar xf /tmp/_safe_upgrade_intermadiate.tar -C /tmp/_to_sysupgradetgz/")
        end
    end

    if args.preserve_archive then
        os.execute("tar xfz " .. args.preserve_archive .. " -C /tmp/_to_sysupgradetgz/")
    end

    os.execute("tar cfz /tmp/sysupgrade.tgz -C /tmp/_to_sysupgradetgz/ `ls /tmp/_to_sysupgradetgz/`")
    utils.log('List of files that are being preserved:')
    local file_list = {}
    local out = io.popen("tar tfz /tmp/sysupgrade.tgz")
    for line in out:lines() do
        --! skip directories
        if not utils.stringEnds(line, '/') then
            table.insert(file_list, line)
            utils.log('\t' .. line)
        end
    end
    out:close()
    return file_list
end

local function bootstrap(args)
    --TODO: add --force option to upgrade SU
    if is_su_installed() then
        print(string.format("safe-upgrade version '%s' is already installed, aborting",
                            get_su_version()))
        os.exit(121)
    end


    if su.get_current_partition() ~= 1 then
        print("installing safe-upgrade from partition 2 is not supported yet")
        os.exit(120)
    end

    set_stable_partition(1)
    set_testing_partition(0)
    set_uboot_env('fw1_addr', string.format("0x%x", fw1_addr))
    set_uboot_env('fw2_addr', string.format("0x%x", fw2_addr))

    -- configure cmdline using the current cmdline config to not force
    -- us to know here the correct cmdline bootargs of the running kernel
    local boot_1 = 'set bootargs ' .. get_current_cmdline() .. '; echo booting part 1; bootm ${fw_addr};'
    set_uboot_env('boot_1', boot_1)
    set_uboot_env('su_version', su.version)

    -- installing the script. Everything must be installed before this!
    set_uboot_env('bootcmd', bootcmd)
    print('succesfully bootstraped safe-upgrade')
end

local function _verify(firmware)
    local fw_metadata = read_fw_metadata(firmware)
    local fw_valid = fw_metadata ~= nil and su.is_firmware_valid(fw_metadata)
    return fw_valid
end

local function verify(args)
    if _verify(args.firmware) then
        os.exit(0)
    else
        print("Invalid firmware!")
        os.exit(111)
    end
end

local function upgrade(args)
    assert_su_installed()
    local partitions = su.get_partitions()

    if not _verify(args.firmware) then
        print("Invalid firmware!")
        if args.force then
            print("Forcing upgrade to continue as requested.")
        else
            os.exit(111)
        end
    end

    su.preserve_files_to_new_partition(args)

    -- postpone 10m defarable-reboot
    os.execute("awk '{print $1 + 600}' /proc/uptime > /tmp/deferable-reboot.defer")

    print(string.format("erasing partition %d", partitions.other))
    os.execute(string.format("mtd erase fw%d", partitions.other))

    -- It is important that the mtd -j option to preserve a file is used
    -- with the file /tmp/sysupgrade.tgz because there are hooks in place
    -- to unpack this tar and install the files at boot
    print(string.format("writing partition %d", partitions.other))
    os.execute(string.format("mtd -j /tmp/sysupgrade.tgz write %s fw%d",
                             args.firmware, partitions.other))

    -- TODO: load bootargs from acompaning image, here is hardcoded!!

    if partitions.other == 2 then
        fw_mtd_str = '7936k(fw1),7936k(firmware)'
    else
        fw_mtd_str = '7936k(firmware),7936k(fw2)'
    end
    local boot_script_tpl = 'set bootargs console=ttyS0,115200 board=LIBREROUTERV1 mtdparts=spi0.0:256k(u-boot),64k(u-boot-env),%s,128k(res),64k(ART); echo booting part %d; bootm ${fw_addr};'
    local boot_script = string.format(boot_script_tpl, fw_mtd_str, partitions.other)
    set_uboot_env(string.format('boot_%d', partitions.other), boot_script)
    set_testing_partition(partitions.other)
end

local function confirm(args)
    assert_su_installed()
    local partitions = su.get_partitions()
    if partitions.current == partitions.stable then
        print(string.format('the current partition: %d is already the stable partition, aborting', partitions.current))
        os.exit(113)
    end

    print("Canceling and disabling automatic reboot")
    os.execute("/etc/init.d/safe_upgrade_auto_reboot stop")
    os.execute("/etc/init.d/safe_upgrade_auto_reboot disable")

    set_stable_partition(partitions.current)
    print(string.format('Confirmed partition %d as stable partition', partitions.current))
end

local function test_other_partition(args)
    assert_su_installed()
    local partitions = su.get_partitions()
    set_testing_partition(partitions.other)
    print(string.format('Next boot will run partition: %d. You may confirm it if you like after reboot.', partitions.other))
end


local function parse_args()
    local function validate_file_exists(filename)
        if utils.file_exists(filename) then
            return filename
        else
            return nil, string.format("file %q does not exists", filename)
        end
    end

    local function validate_safety_timeout(value)
        local timeout = tonumber(value)
        if timeout == nil then
            return nil, string.format("invalid --reboot-safety-timeout value: %q", value)
        end
        if timeout < 60 then
            return nil, string.format("--reboot-safety-timeout must be greater than 60 but was %q", timeout)
        end
        return timeout
    end

    local argparse = require 'argparse'
    local parser = argparse('safe-upgrade', 'Safe upgrade mechanism for dual-boot systems')
    parser:command_target('command')

    local show = parser:command('show', 'Show the status of the system partitions.')

    local verify = parser:command('verify', 'Verify that the firmware is valid and can be installed.')
    verify:argument("firmware", "firmware image (xxx-sysupgrade.bin)"):convert(validate_file_exists)

    local upgrade = parser:command('upgrade', 'Upgrade firmware in a non permanent way.')
    upgrade:argument("firmware", "firmware image (xxx-sysupgrade.bin)"):convert(validate_file_exists)
    upgrade:flag("-n --do-not-preserve-config", "Do not save configuration to the new partition")
    upgrade:flag("--disable-reboot-safety", "Disable the automatic reboot safety mechanism")
    upgrade:flag("--force", "Upgrade even if firmware is not valid")
    upgrade:option("--preserve-archive", [[Specify additional files to preserve as a tar.gz (Like the sysupgrade -f).
    To preserve a full config you may use sysupgrade --create-backup and use this .tar.gz.]])
                   :convert(validate_file_exists)
    upgrade:option("--reboot-safety-timeout",
                   "Set the timeout (in seconds) of the automatic reboot safety mechanism")
                   :default('600'):convert(validate_safety_timeout)

    local confirm = parser:command('confirm', ('Confirm the current partition. Use when after an upgrade ' ..
                                              'or after running "test-other-partition".'))

    local bootstrap = parser:command('bootstrap', 'Install the safe-upgrade mechanism')

    local test_other_parition = parser:command('test-other-partition',
        'Mark the other partition as testing partition.')

    local board_supported = parser:command('board-supported', 'Exits with 0 if board is supported')
    --local swap_stable = parser:command('swap', 'Change the stable partition to the other partition.')
    local args = parser:parse()


    return args
end

-- detect if this module is run as a library or as a script
if pcall(debug.getlocal, 4, 1) then
    -- Library mode
    return su
else
    -- Main script mode

    assert_fw_env_configured()

    local args = parse_args()
    if args.bootstrap then
        bootstrap(args)
    elseif args.upgrade then
        upgrade(args)
    elseif args.confirm then
        confirm(args)
    elseif args.verify then
        verify(args)
    elseif args['test-other-partition'] then
        test_other_partition(args)
    elseif args['board-supported'] then
        if su.is_current_board_supported() then
            os.exit(0)
        else
            print("This board is not supported")
            os.exit(198)
        end
    elseif args.show then
        local su_installed_version = su.get_uboot_env('su_version')
        if su_installed_version == nil then
            print('safe-upgrade is not installed, aborting.')
            os.exit(199)
        end
        print('safe-upgrade version: ' .. su_installed_version)
        local partitions = su.get_partitions()
        --TODO show labels of partitions (maybe store them when flashing from a metadata file)
        print(string.format('current partition: %d', partitions.current))
        print(string.format('stable partition: %d', partitions.stable))
        print(string.format('testing partition: %d', partitions.testing))
    end
end
