#!/bin/sh
# requires nftables, liblucihttp0, liblucihttp-lua, uhttpd, uhttpd-mod-lua, uhttpd-mod-ubus


clean_tables () {
	echo "Cleaning captive-portal rules if there's any"
	if nft list tables inet | grep -q "pirania"; then
		nft delete table inet pirania
	fi
	
}

set_nftables () { 
	echo "Apply captive-portal rules"
	# Detect wheter add or insert rules
	#append_nft_rules=$(uci get pirania.base_config.append_nft_rules 2> /dev/null)
	#if [ "$append_nft_rules" = "1" ] ; then
	#	op="add rule"
	#else
	#	op="insert rule"
	#fi

	# Create pirania tables	
	nft create table inet pirania
	# Create default tables and chains
	nft add table inet pirania
	nft add chain inet pirania prerouting { type nat hook prerouting priority 0 \; }
	nft add chain inet pirania input { type filter hook input priority 0 \; }
	nft add chain inet pirania forward { type filter hook forward priority 0 \; }

  	# Add mac-adress set
  	nft add set inet pirania pirania-auth-macs { type ether_addr\; }

	# Create ipv4 set on pirania table
  	nft add set inet pirania pirania-allowlist-ipv4 { type ipv4_addr \; flags interval \; comment \"allow ipv4 list\" \; }
  	# Create ipv6 set on pirania table
  	nft add set inet pirania pirania-allowlist-ipv6 { type ipv6_addr \; flags interval \; comment \"allow ipv6 list\" \; }

	# Only accept packets from interfaces defined in catch_bridged_interfaces
	catch_interfaces=$(uci get pirania.base_config.catch_bridged_interfaces | sed 's/ /,/g')

	# Stop processing the chain for authorized macs and allowed ips (so they are accepted)
	nft add rule inet pirania prerouting ether saddr @pirania-auth-macs ct state new,established,related counter log prefix "ValidSMAC" accept
	nft add rule inet pirania prerouting ip daddr @pirania-allowlist-ipv4 ct state new,established,related counter log prefix "ACCEPT-ipv4" accept
	nft add rule inet pirania prerouting ip6 daddr @pirania-allowlist-ipv6 ct state new,established,related counter log prefix "ACCEPT-ipv6" accept

	# Send DNS requests, that are not from valid ips or macs, to our own captive portal DNS at 59053
	nft add rule inet pirania prerouting meta l4proto udp udp dport 53 ether saddr != @pirania-auth-macs ct state new limit rate 10/second counter log prefix "SMACDNS"  redirect to :59053
	# Redirect packets with dest port 80 to port 59080 of this host (the captive portal page).
	nft add rule inet pirania prerouting meta l4proto tcp tcp dport 80 ether saddr != @pirania-auth-macs ct state new limit rate 10/second counter log prefix "SMACHTTP"  redirect to :59080

}

update_ipsets () {

  # Create tables and sets
  echo "Updating captive-portal rules"

  # Add authorized MAC addresses
  for mac in $(pirania_authorized_macs) ; do
    nft add element inet pirania pirania-auth-macs {$mac}
	echo "Adicionando enderecos:" $mac
  done

  # Update pirania-allowlist sets for ipv4 and ipv6
  nft flush set inet pirania pirania-allowlist-ipv4
  nft flush set inet pirania pirania-allowlist-ipv6
  
  # Add allowed ip/prefixes
  # Get values from allowlist_ipvX and add to pirania-allowlist-ipvX set
  ipv4allowlist=$(uci get pirania.base_config.allowlist_ipv4 | sed 's/ /,/g')
  nft add element inet pirania pirania-allowlist-ipv4 {$ipv4allowlist}

  ipv6allowlist=$(uci get pirania.base_config.allowlist_ipv6 | sed 's/ /,/g')
  nft add element inet pirania pirania-allowlist-ipv6 {$ipv6allowlist}
}

# check if captive-portal is enabled in /etc/config/pirania
enabled=$(uci get pirania.base_config.enabled)

if  [ "$1" = "start" ]; then
	echo "Running captive-portal"
	/etc/init.d/pirania-dnsmasq start
	/etc/init.d/pirania-uhttpd start
	clean_tables
	set_nftables
	update_ipsets
	exit
elif [ "$1" = "update" ] ; then
	echo "Captive-portal updating rules"
	update_ipsets
	exit
elif [ "$1" = "clean" ] || [ "$1" = "stop" ] ; then
	clean_tables
	exit
elif [ "$enabled" = "1" ]; then
	echo "Captive-portal already enabled, reloading rules"
	clean_tables
#	set_nftables
	update_ipsets
	exit
elif [ "$1" = "enabled" ]; then
	uci set pirania.base_config.enabled='1'
	# i/o error in my device - check later
	#uci commit
	echo "Captive-portal is now enabled"
else
	echo "Pirania captive-portal is disabled. Try running captive-portal start"
	exit
fi