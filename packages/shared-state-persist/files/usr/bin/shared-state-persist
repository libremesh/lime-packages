#!/usr/bin/lua
--! SPDX-License-Identifier: GPL-3.0-or-later
--!
--! Copyright (C) 2019 Luandro <luandro@gmail.com>
--! Copyright (C) 2019 Marcos Gutierrez <gmarcos@altermundi.net>

--!	Documentation: 
--!	Searches the mounted devices according to the following logic:
--!	- The mounted storage device has no shared-state folder (creates 
--!   the directory and uses it after copy actual /var/shared-state)
--!	- The mounted device has the folder shred-state (uses it as is)
--!	- If not devices found use the defautl /var/shared-state
--!	Info: Shared-state-persist use the first result founded.

local nixio = require('nixio')
local fs = nixio.fs

local sharedStateFolder = "/shared-state"
local sharedStateDefaultLocation = "/var/shared-state"

local NEW_DEVICE = 0
local OLD_DEVICE = 1
local NON_DEVICE = 2

local function log(text) 
	nixio.syslog('info', 'shared-state-persist: '..text)
end

local function shell(command)
    local handle = io.popen(command)
    local result = handle:read("*a")
    handle:close()
    return result
end

local function usePath(path, status)   

	if status == NEW_DEVICE then
		log('Device found - Use device after create shared-folder and preseve status '..path..' '..status)
		os.execute('mv '..sharedStateDefaultLocation..' '..path..sharedStateFolder)
		fs.symlink(path..sharedStateFolder, sharedStateDefaultLocation)

	elseif status == OLD_DEVICE then
		log('Device found - Use device and existent folder '..path..' '..status)
		os.execute('rm -rf '..sharedStateDefaultLocation)
		fs.symlink(path..sharedStateFolder, sharedStateDefaultLocation)

	elseif status == NON_DEVICE then
		log('No device found - Remove symlink and use default folder '..sharedStateDefaultLocation)
		if fs.lstat(sharedStateDefaultLocation).type == 'lnk' then
			fs.remove(sharedStateDefaultLocation)
			fs.mkdir(sharedStateDefaultLocation)
		end
	end

end

local function getDevices()
	log('Scanning devices')
	return shell("block info | grep -oE \"(\/mnt\/+[a-z]*[0-9])\""):gmatch("[^'\n']+")
end

local function isWritable(devicePath)
	return fs.stat(devicePath..'/shared_state_persist_ignore_device') == nil
end

local function runPersist()
	local selectedPath = nil
	local selectedOption = NON_DEVICE

	for mntPath in getDevices() do
		--! Setup first device as valid
		if selectedPath == nil and selectedOption == NON_DEVICE and isWritable(mntPath) then
			selectedOption = NEW_DEVICE
			selectedPath = mntPath
		end
		--! Check for previus shared-state folder in the device
		local folders = fs.dir(mntPath)
		for folder in folders do
			if selectedOption == NEW_DEVICE and folder == 'shared-state' then 
				selectedOption = OLD_DEVICE
				selectedPath = mntPath
			end
		end
	end
	usePath(selectedPath, selectedOption)
end

runPersist()
