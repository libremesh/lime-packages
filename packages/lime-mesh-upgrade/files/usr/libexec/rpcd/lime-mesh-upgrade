#!/usr/bin/env lua

--[[
  Copyright (C) 2013-2023 LibreMesh.org
  This is free software, licensed under the GNU AFFERO GENERAL PUBLIC LICENSE Version 3

  Copyright 2023 Selankon <selankon@selankon.xyz>
]] --
local json = require 'luci.jsonc'
local mesh_upgrade = require 'lime-mesh-upgrade'
local ubus = require "ubus"

local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end

local function become_main_node(msg)
    local result = mesh_upgrade.become_main_node(msg.url)
    return utils.printJson(result)
end

local function start_firmware_upgrade_transaction(msg)
    local result = mesh_upgrade.start_firmware_upgrade_transaction()
    return utils.printJson(result)
end

-- It gets the mesh upgrade status for this node
-- Shortcut to get the status without await the shared state synchronization
local function get_node_status(msg)
    local result = mesh_upgrade.get_node_status()
    return utils.printJson(result)
end

local function start_safe_upgrade(msg)
    local result = mesh_upgrade.start_safe_upgrade(msg.start_delay ,msg.confirm_timeout)
    return utils.printJson(result)
end
-- to be called after successfully reboot 
local function confirm(msg)
    local result = mesh_upgrade.confirm()
    return utils.printJson(result)
end

local function abort(msg)
    local result = mesh_upgrade.mesh_upgrade_abort()
    return utils.printJson(result)
end

local methods = {
    become_main_node = {
        url = 'value'
    },
    start_firmware_upgrade_transaction = {
        no_params = 0
    },
    get_node_status = {
        no_params = 0
    },
    start_safe_upgrade = {
        confirm_timeout = 0,
        start_delay = 0,
    },
    confirm_boot_partition = {
        no_params = 0
    },
    abort = {
        no_params = 0
    }

}

if arg[1] == 'list' then
    utils.printJson(methods)
end

if arg[1] == 'call' then
    local msg = utils.rpcd_readline()
    msg = json.parse(msg)
    if arg[2] == 'become_main_node' then
        become_main_node(msg)
    elseif arg[2] == 'start_firmware_upgrade_transaction' then
        start_firmware_upgrade_transaction(msg)
    elseif arg[2] == 'get_node_status' then
        get_node_status(msg)
    elseif arg[2] == 'start_safe_upgrade' then
        start_safe_upgrade(msg)
    elseif arg[2] == 'confirm_boot_partition' then
        confirm(msg)
    elseif arg[2] == 'abort' then
        abort(msg)
    else
        utils.printJson({
            error = "Method not found"
        })
    end
end
